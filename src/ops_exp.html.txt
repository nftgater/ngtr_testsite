<div id="authbox" style="text-align:center;">
<button id="ops_start" class="btn btn-lg" style="display:none;border-radius:5px;border:none;background-color:#21d19f;color:#000;box-shadow:0 3px 10px rgb(0 0 0 / 0.8);line-height:1em;font-size:1.5em;font-family:monospace;padding:15px;">Start Auth</button>
 <div id="statusconsole" style="color:#20C20E;background-color:#000;width:fit-content;margin-top:1em;margin-left:auto;margin-right:auto;font-size:15px;padding:5px;text-align:center;margin-bottom:1em;">NFT Gater</div>
<div id="m_opt" style="display:none;">
<div id="m_url"></div>
<div id="m_pld"></div>
  <form onsubmit="m_Pld()" id="m_frm">
   
    <input type="text" id="mPIN" /><input type="submit" />
  </form>
</div>
<div id="p_inj"></div>
<div id="redo" style="margin-top:1em;"></div>
</div>

<script>
console.log("Script Start")
// callback for manual mode
let manualLoad = false
let payloadDone = false
let callback = "https://unnimagnum.com/"
// g_A
function g_A() {
const params = new URLSearchParams(window.location.search);
let gateAuth = params.get('auth');
let gateID = params.get('gid') 
console.log("debug: auth param?: "+gateAuth)
console.log("debug: any gateID param? "+gateID)

if(!(gateAuth)) {
return false;
} else {
if(typeof gateID == "undefined" || gateID === null) {
  return [gateAuth, "0"];
} else {
  return [gateAuth, gateID]
}
}
}
// drawBtn
function drawBtn() {
console.log("inside DrawBtn")
console.log("iframe workaround, NOT unhiding button")
document.getElementById("ops_start").style.display = "initial" 
document.getElementById("p_inj").innerHTML = "<em>...</em>" 
document.getElementById("statusconsole").innerHTML = "&#9889; Authenticate wallet to begin."
// add/update link of button
let el_btn = document.getElementById("ops_start")
let ank = document.createElement("a")

let reDir = undefined;

try{
ank.target = "_top"
let callback2 = window.top.location.href
reDir = "https://janus-auth.vercel.app/?callback="+callback2
ank.href = reDir
console.log("URL param:")
console.log(callback2)
ank.appendChild(el_btn.cloneNode(true))
el_btn.parentNode.replaceChild(ank, el_btn)
}catch(err) {
console.log("window.top.location prohibited")
console.log(err)
reDir = "https://janus-auth.vercel.app/?callback="+callback
   document.getElementById('m_url').innerHTML = `<p><b>Manual Start:</b></p><p>If the Start Auth button isn't working properly, visit the authenticator manually:</p><p><em>${reDir}</em></p>`

document.getElementById('m_pld').innerHTML = ` <p><b>Manual Auth:</b></p><p>If the payload is not recognized right away, enter your auth code here.</p>`
document.getElementById('m_opt').style['display'] = "initial"
document.getElementById('ops_start').style['display'] = "none";

document.getElementById('m_frm').addEventListener('submit', function(event) {
 event.preventDefault();
 m_Pld();
});
}

return;
}
// m_Pld, id mPIN
async function m_Pld() {
let mAuth = document.getElementById('mPIN').value
console.log(`debug: mAuth: ${mAuth}`)
g_E([mAuth,0]);
return;
}
// g_E
async function g_E(auth) {
console.log("executing auth: ")
console.log(auth)
if(auth) {
console.log("Firing g_P")
await g_P(auth).then(pld => {
  console.log("payload:")
  console.log(pld)
  if(pld[0] !== "OK") {
    drawBtn()
    return false
  } else {
    console.log("parsing payload")
    document.getElementById('statusconsole').innerHTML = pld[2]
    let status = p_P(pld)
    if(status == false) {
      drawBtn();
      return;
    } else {
      document.getElementById('statusconsole').innerHTML = `Gating tech made by <a style="color:#ccff00;" href='https://nftgater.vercel.app' />NFT Gater</a>`
      let predo = document.getElementById('redo')
      let redo = document.createElement('a')
      redo.style['color'] = "#20C20E";
      redo.style['background-color'] = "#000";
      redo.style['margin-top'] = "1em";
      redo.style['padding'] = "5px";
      
      redo.title = "Your existing gate auth will be kept as a cookie and you can reverify to select a different gate."
      let cu = undefined;
      let url = undefined;
      try{
        cu = window.top.location.href;
        url = new URL(cu)
        redo.textContent = "Start Over"
        const cleanURL = url.origin + url.pathname;
        redo.href=`https://janus-auth.vercel.app/?callback=${cleanURL}`
        predo.innerHTML = ""
        predo.appendChild(redo)
      }catch(err) {
        console.log("iframe restrictions")
        console.log(err)
        cu = callback;
        url = new URL(cu)
        const cleanURL = url.origin + url.pathname;
        redo.innerHTML=`https://janus-auth.vercel.app/?callback=${cleanURL}`
        console.log(`manual redo: ${redo.href}`)
        predo.innerHTML = ""
        let mredomsg = document.createElement('p')
        mredomsg.innerText = "To restart manually, visit:"
        predo.appendChild(mredomsg)
        predo.appendChild(redo)
      }
    }
    return status
  }
})
} else {
drawBtn()
return false
}
}
// g_P
async function g_P(g_auth) {
console.log("In g_P");
if(g_auth == false) {
console.log("auth was false, getPayload passing false.")
return false;
}
if(g_auth[1] === null) g_auth[1] = "0";
let fURL = `https://ngtr-api.onrender.com/ops/p/${g_auth[0]}/${g_auth[1]}/0`;
console.log(`debug: fetching: ${fURL}`)
let result = await fetch(fURL)
let loadResults = await result.json()
console.log("loadResults:")
console.log(loadResults)
let p_timeout = 15
do {
setTimeout(() => { }, 1000)
p_timeout--
console.log("Payload loop, time: "+p_timeout+" seconds")
console.log("Payload yet? ")
console.log(loadResults)
} while (loadResults == "" && p_timeout > 0);
return loadResults;
}
// p_P
function p_P(g_pld) {
console.log("in parsePayload() with payload [1][0]!: ")
console.log(g_pld[1][0])
if(g_pld[0] != "OK") {
  console.log("Payload was false.")
  statusUI(g_pld[2])
  return false;
} else {
if(payloadDone == false) {
  document.getElementById('m_opt').style['display'] = "none"
  document.getElementById('ops_start').style['display'] = "none"
  // refreshing p_inj
  document.getElementById('p_inj').innerHTML = ""

  let pld = g_pld[1][0].gatekey_payload
  let rtn = g_pld[1][0].gatekey_returnformat
  
  payloadDone = true
  
  switch(rtn) {
      case "V_VIMEO_R1_H":
          parseVimeoR1_hidden(pld)
          break;
      case "V_VIMEO_F1_H":
          parseVimeoF1_hidden(pld)
          break;
      case "V_VIMEO_R1_P":
          parseVimeoR1_private(pld)
          break;
      case "R_STRING":
          parseString(pld);
          break;
      case "P_TICKET":
          parseTicket(pld);
          return true;
      case "P_HTML":
          parseHTML(pld);
          break;
      case "P_SCRIPT":
          parseScript(pld);
          break;
      case "P_REDIRECT":
          parseRedirect(pld);
          break;
      case "S_YOUTUBE":
          parseYT(pld);
          break;
      case "P_PASSTHROUGH":
          return pld;
      case "S_SPROUT":
          parseSprout(pld)
          return true;
      case "S_SPROUTL":
          parseSproutLightbox(pld)
          break;
      case "S_SPROUTP":
          parseSproutPlaylist(pld);
          break;
      default:
          console.log("ERROR: bad rtn value")
          return false;
  }

return true;
} else {
  console.log("payload already parsed")
  return true;
}
}
}

///
function parseVimeoR1_hidden(pld) {
document.getElementById('p_inj').innerHTML = `<div style="padding:56.25% 0 0 0;position:relative;"><iframe src="https://player.vimeo.com/video/${pld}&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" style="position:absolute;top:0;left:0;width:100%;height:100%;" title=""></iframe>
</div><script src="https://player.vimeo.com/api/player.js">
<\\/script>`
return true;
}

function parseVimeoF1_hidden(pld) { // bookmark: unused
document.getElementById('p_inj').innerHTML = `<iframe src="https://player.vimeo.com/video/${pld}&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" width="1920" height="1080" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" title=""></iframe>`
return true;
}

function parseVimeoR1_private(pld) { // or public
document.getElementById('p_inj').innerHTML = `<div style="padding:56.25% 0 0 0;position:relative;"><iframe src="https://player.vimeo.com/video/${pld}&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" style="position:absolute;top:0;left:0;width:100%;height:100%;" title=""></iframe></div><script src="https://player.vimeo.com/api/player.js"><\\/script>`
return true;
}

function parseRedirect(pld) {
window.location = `${pld}?src=${window.location}`
return true;
}

function parseSprout(pld) {
// Inject a Sprout iframe embed 
/*
Maybe I don't need to create new elements and append.
*/
document.getElementById("p_inj").innerHTML = `<iframe class='sproutvideo-player' src='https://videos.sproutvideo.com/embed/${pld}' width='640' height='360' frameborder='0' allowfullscreen referrerpolicy='no-referrer-when-downgrade' title='Video Player'></iframe>`
}

function parseSproutLightbox(pld) {
document.getElementById("p_inj").innerHTML = `<a href='https://videos.sproutvideo.com/embed/${pld}?autoPlay=false' class='sproutvideo-lightbox' data-width='640' data-height='360'><img src='https://cdn-thumbnails.sproutvideo.com/ea9fd8b71d1ceacb63/f0ee2e450da6d6ea/1682189435/w_640,h_360,btn_true/poster.jpg' style='max-width:100%'/></a><script charset='ISO-8859-1' src='https://c.sproutvideo.com/lightbox/v1.0.0.js'><\\/script>`
}

function parseSproutPlaylist(pld) {
document.getElementById("p_inj").innerHTML = `<iframe class='sproutvideo-playlist' src='https://videos.sproutvideo.com/playlist/${pld}' width='924' height='416' frameborder='0' allowfullscreen referrerpolicy='no-referrer-when-downgrade' title='Video Player'></iframe>`
}

function parseYT(pld) {
console.log("In parseYT()")
let p_inj = document.getElementById("p_inj")

let yt_frame = document.createElement("iframe")
yt_frame.setAttribute("width", "560")
yt_frame.setAttribute("height", "315")
yt_frame.setAttribute("src", `https://www.youtube.com/embed/${pld}`)
yt_frame.setAttribute("frameborder", "0")
yt_frame.setAttribute("allow", "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share")
// yt_frame.setAttribute("allowfullscreen") not sure about this yet
p_inj.appendChild(yt_frame)

}

function parseString(pld) { // preformatted
document.getElementById('p_inj').innerHTML = `<h1>${pld}</h1>`
document.getElementById('p_inj').innerHTML = "<p title='You won't see anything with this parse type, it passes the payload to a calling parent function (advanced)'>(script passthrough)</p>"
return;
}

function parseTicket(pld) { // preformatted
document.getElementById('p_inj').innerHTML = `<h1>${pld}</h1>`
document.getElementById('p_inj').innerHTML = "<p title='You won't see anything with this parse type, it passes the payload to a calling parent function (advanced)'>(script passthrough)</p>"
return;
}

//
// Fire Scripts

console.log("Firing gA")
let auth = g_A()
console.log("debug: auth:")
console.log(auth)
if(auth) {
document.getElementById("statusconsole").innerHTML = "&#9989; Loading gate payload..."
g_E(auth);
} else {
drawBtn();
}

</script>